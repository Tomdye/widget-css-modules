import { ComposeFactory } from 'dojo-compose/compose';
import { Handle } from 'dojo-interfaces/core';
import { Widget, WidgetState, WidgetOptions, WidgetProperties } from './interfaces';
import { Projector as MaquetteProjector } from 'maquette';
import Promise from 'dojo-shim/Promise';
/**
 * Represents the state of the projector
 */
export declare enum ProjectorState {
    Attached = 1,
    Detached = 2,
}
/**
 * Attach type for the projector
 */
export declare enum AttachType {
    Append = 1,
    Merge = 2,
    Replace = 3,
}
export interface AttachOptions {
    /**
     * If `'append'` it will append to the root. If `'merge'` it will merge with the root. If `'replace'` it will
     * replace the root.
     */
    type: AttachType;
}
/**
 * Projector interface
 */
export interface ProjectorOptions extends WidgetOptions<WidgetState, WidgetProperties> {
    /**
     * An optional root of the projector
     */
    root?: Element;
    /**
     * If `true`, will configure the projector to support css transitions using `cssTransitions` global object.
     * The projector will fail create if the options is true but the global object cannot be found.
     */
    cssTransitions?: boolean;
}
export interface ProjectorMixin {
    /**
     * Append the projector to the root.
     */
    append(): Promise<Handle>;
    /**
     * Merge the projector onto the root.
     */
    merge(): Promise<Handle>;
    /**
     * Replace the root with the projector node.
     *
     *
     */
    replace(): Promise<Handle>;
    /**
     * Root element to attach the projector
     */
    root: Element;
    /**
     * The Maquette projector
     */
    readonly projector: MaquetteProjector;
    /**
     * The status of the projector
     */
    readonly projectorState: ProjectorState;
}
export declare type Projector = Widget<WidgetState, WidgetProperties> & ProjectorMixin;
export interface ProjectorFactory extends ComposeFactory<Projector, ProjectorOptions> {
}
/**
 * Projector Factory
 */
declare const createProjector: ProjectorFactory;
export default createProjector;
