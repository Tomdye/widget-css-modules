{"version":3,"file":"createTextInput.js","sourceRoot":"","sources":["createTextInput.ts"],"names":[],"mappings":";;;;;;;;;IACA,2DAAsD;IAEtD,0EAAqI;IAerI,IAAM,eAAe,GAAqB,0BAAgB;SACxD,KAAK,CAAC,8BAAoB,CAAC;SAC3B,KAAK,CAAC;QACN,KAAK,EAAE;YACN,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,OAAO;SAChB;QACD,UAAU,YAAC,QAAQ;YAClB,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAyC;gBAC3E,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;YACrC,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;KACD,CAAC,CAAC;;IAEJ,kBAAe,eAAe,CAAC","sourcesContent":["import { ComposeFactory } from 'dojo-compose/compose';\nimport createWidgetBase from '../../createWidgetBase';\nimport { Widget, WidgetOptions, WidgetState, WidgetProperties } from './../../interfaces';\nimport createFormFieldMixin, { FormFieldMixin, FormFieldMixinState, FormFieldMixinOptions } from '../../mixins/createFormFieldMixin';\n\n/* TODO: I suspect this needs to go somewhere else */\nexport interface TypedTargetEvent<T extends EventTarget> extends Event {\n\ttarget: T;\n}\n\nexport type TextInputState = WidgetState & FormFieldMixinState<string>;\n\nexport type TextInputOptions = WidgetOptions<TextInputState, WidgetProperties> & FormFieldMixinOptions<string, TextInputState>;\n\nexport type TextInput = Widget<TextInputState, WidgetProperties> & FormFieldMixin<string, TextInputState>;\n\nexport interface TextInputFactory extends ComposeFactory<TextInput, TextInputOptions> { }\n\nconst createTextInput: TextInputFactory = createWidgetBase\n\t.mixin(createFormFieldMixin)\n\t.mixin({\n\t\tmixin: {\n\t\t\ttype: 'text',\n\t\t\ttagName: 'input'\n\t\t},\n\t\tinitialize(instance) {\n\t\t\tinstance.own(instance.on('input', (event: TypedTargetEvent<HTMLInputElement>) => {\n\t\t\t\tinstance.value = event.target.value;\n\t\t\t}));\n\t\t}\n\t});\n\nexport default createTextInput;\n"]}