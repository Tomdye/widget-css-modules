{"version":3,"file":"createButton.js","sourceRoot":"","sources":["createButton.ts"],"names":[],"mappings":";;;;;;;;;IAEA,2DAAsD;IAEtD,0EAAqI;IAgBrI,IAAM,YAAY,GAAkB,0BAAgB;SAClD,KAAK,CAAC,8BAAoB,CAAC;SAC3B,KAAK,CAAC;QACN,KAAK,EAAE;YACN,cAAc,EAAE;gBACf;oBACC,MAAM,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACxC,CAAC;aACD;YACD,OAAO,EAAE,QAAQ;YACjB,IAAI,EAAE,QAAQ;SACd;KACD,CAAC,CAAC;;IAEJ,kBAAe,YAAY,CAAC","sourcesContent":["import { ComposeFactory } from 'dojo-compose/compose';\nimport { VNodeProperties } from 'dojo-interfaces/vdom';\nimport createWidgetBase from '../../createWidgetBase';\nimport { Widget, WidgetOptions, WidgetProperties, WidgetState } from './../../interfaces';\nimport createFormFieldMixin, { FormFieldMixin, FormFieldMixinState, FormFieldMixinOptions } from '../../mixins/createFormFieldMixin';\n\nexport interface ButtonState extends WidgetState, FormFieldMixinState<string> {\n\tlabel?: string;\n}\n\nexport interface ButtonProperties extends WidgetProperties {\n\tlabel?: string;\n}\n\nexport interface ButtonOptions extends WidgetOptions<ButtonState, ButtonProperties>, FormFieldMixinOptions<any, ButtonState> { }\n\nexport type Button = Widget<ButtonState, ButtonProperties> & FormFieldMixin<string, ButtonState>;\n\nexport interface ButtonFactory extends ComposeFactory<Button, ButtonOptions> { }\n\nconst createButton: ButtonFactory = createWidgetBase\n\t.mixin(createFormFieldMixin)\n\t.mixin({\n\t\tmixin: {\n\t\t\tnodeAttributes: [\n\t\t\t\tfunction(this: Button): VNodeProperties {\n\t\t\t\t\treturn { innerHTML: this.state.label };\n\t\t\t\t}\n\t\t\t],\n\t\t\ttagName: 'button',\n\t\t\ttype: 'button'\n\t\t}\n\t});\n\nexport default createButton;\n"]}