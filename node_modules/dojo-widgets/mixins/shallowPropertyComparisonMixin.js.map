{"version":3,"file":"shallowPropertyComparisonMixin.js","sourceRoot":"","sources":["shallowPropertyComparisonMixin.ts"],"names":[],"mappings":";;;;;;;;;IAAA,2CAA2C;IAU3C;;OAEG;IACH,kBAAkB,KAAU;QAC3B,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,iBAAiB,CAAC;IACpE,CAAC;IAED;;OAEG;IACH,wBAAwB,IAAS,EAAE,EAAO;QACzC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,UAAC,GAAG,IAAK,OAAA,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,EAArB,CAAqB,CAAC,CAAC;QAChE,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAED;;;;;;;;OAQG;IACH,IAAM,8BAA8B,GAA8C;QACjF,KAAK,EAAE;YACN,cAAc,EAAd,UAAoE,kBAAqB;gBACxF,IAAM,mBAAmB,GAAa,EAAE,CAAC;gBAEzC,gBAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAC,EAAY;wBAAX,WAAG,EAAE,aAAK;oBAC5C,IAAI,OAAO,GAAG,IAAI,CAAC;oBACnB,EAAE,CAAC,CAAC,kBAAkB,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC5C,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC;4BACpC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCAC1B,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,UAAC,IAAS,EAAE,KAAa;oCAC9C,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wCACpB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,kBAAkB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oCAC7D,CAAC;oCACD,IAAI,CAAC,CAAC;wCACL,MAAM,CAAC,IAAI,KAAK,kBAAkB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;oCAChD,CAAC;gCACF,CAAC,CAAC,CAAC;4BACJ,CAAC;4BACD,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCAC1B,OAAO,GAAG,cAAc,CAAC,KAAK,EAAE,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;4BAC1D,CAAC;4BACD,IAAI,CAAC,CAAC;gCACL,OAAO,GAAG,KAAK,KAAK,kBAAkB,CAAC,GAAG,CAAC,CAAC;4BAC7C,CAAC;wBACF,CAAC;oBACF,CAAC;oBACD,IAAI,CAAC,CAAC;wBACL,OAAO,GAAG,KAAK,CAAC;oBACjB,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACd,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC/B,CAAC;gBACF,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,mBAAmB,CAAC;YAC5B,CAAC;SACD;KACD,CAAC;;IAEF,kBAAe,8BAA8B,CAAC","sourcesContent":["import { entries } from 'dojo-shim/object';\nimport { WidgetProperties } from './../interfaces';\n\n/**\n * Interface for `diffProperties`\n */\nexport interface ShallowPropertyComparisonMixin {\n\tdiffProperties<T>(previousProperties: T): string[];\n}\n\n/**\n * Determine if the value is an Object\n */\nfunction isObject(value: any) {\n\treturn Object.prototype.toString.call(value) === '[object Object]';\n}\n\n/**\n * Shallow comparison of all keys on the objects\n */\nfunction shallowCompare(from: any, to: any) {\n\tif (to) {\n\t\treturn Object.keys(from).every((key) => from[key] === to[key]);\n\t}\n\treturn false;\n}\n\n/**\n * Mixin that overrides the `diffProperties` method providing a shallow comparison of attributes.\n *\n * For Objects, values for all `keys` are compared against the equivalent `key` on the `previousProperties`\n * attribute using `===`. If the `key` does not exists on the `previousProperties` attribute it is considered unequal.\n *\n * For Arrays, each `item` is compared with the `item` in the equivalent `index` of the `previousProperties` attribute.\n * If the `item` is an `object` then the object comparison described above is applied otherwise a simple `===` is used.\n */\nconst shallowPropertyComparisonMixin: { mixin: ShallowPropertyComparisonMixin } = {\n\tmixin: {\n\t\tdiffProperties<T extends WidgetProperties>(this: { properties: T }, previousProperties: T): string[] {\n\t\t\tconst changedPropertyKeys: string[] = [];\n\n\t\t\tentries(this.properties).forEach(([key, value]) => {\n\t\t\t\tlet isEqual = true;\n\t\t\t\tif (previousProperties.hasOwnProperty(key)) {\n\t\t\t\t\tif (!(typeof value === 'function')) {\n\t\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\t\tisEqual = value.every((item: any, index: number) => {\n\t\t\t\t\t\t\t\tif (isObject(item)) {\n\t\t\t\t\t\t\t\t\treturn shallowCompare(item, previousProperties[key][index]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\treturn item === previousProperties[key][index];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (isObject(value)) {\n\t\t\t\t\t\t\tisEqual = shallowCompare(value, previousProperties[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tisEqual = value === previousProperties[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tisEqual = false;\n\t\t\t\t}\n\t\t\t\tif (!isEqual) {\n\t\t\t\t\tchangedPropertyKeys.push(key);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn changedPropertyKeys;\n\t\t}\n\t}\n};\n\nexport default shallowPropertyComparisonMixin;\n"]}