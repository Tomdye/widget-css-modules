(function (dependencies, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(dependencies, factory);
    }
})(["require", "exports", "dojo-shim/object"], function (require, exports) {
    "use strict";
    var object_1 = require("dojo-shim/object");
    /**
     * Determine if the value is an Object
     */
    function isObject(value) {
        return Object.prototype.toString.call(value) === '[object Object]';
    }
    /**
     * Shallow comparison of all keys on the objects
     */
    function shallowCompare(from, to) {
        if (to) {
            return Object.keys(from).every(function (key) { return from[key] === to[key]; });
        }
        return false;
    }
    /**
     * Mixin that overrides the `diffProperties` method providing a shallow comparison of attributes.
     *
     * For Objects, values for all `keys` are compared against the equivalent `key` on the `previousProperties`
     * attribute using `===`. If the `key` does not exists on the `previousProperties` attribute it is considered unequal.
     *
     * For Arrays, each `item` is compared with the `item` in the equivalent `index` of the `previousProperties` attribute.
     * If the `item` is an `object` then the object comparison described above is applied otherwise a simple `===` is used.
     */
    var shallowPropertyComparisonMixin = {
        mixin: {
            diffProperties: function (previousProperties) {
                var changedPropertyKeys = [];
                object_1.entries(this.properties).forEach(function (_a) {
                    var key = _a[0], value = _a[1];
                    var isEqual = true;
                    if (previousProperties.hasOwnProperty(key)) {
                        if (!(typeof value === 'function')) {
                            if (Array.isArray(value)) {
                                isEqual = value.every(function (item, index) {
                                    if (isObject(item)) {
                                        return shallowCompare(item, previousProperties[key][index]);
                                    }
                                    else {
                                        return item === previousProperties[key][index];
                                    }
                                });
                            }
                            else if (isObject(value)) {
                                isEqual = shallowCompare(value, previousProperties[key]);
                            }
                            else {
                                isEqual = value === previousProperties[key];
                            }
                        }
                    }
                    else {
                        isEqual = false;
                    }
                    if (!isEqual) {
                        changedPropertyKeys.push(key);
                    }
                });
                return changedPropertyKeys;
            }
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = shallowPropertyComparisonMixin;
});
//# sourceMappingURL=shallowPropertyComparisonMixin.js.map