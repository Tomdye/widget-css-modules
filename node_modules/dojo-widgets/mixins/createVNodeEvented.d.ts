import { EventTargettedObject, Handle } from 'dojo-interfaces/core';
import { ComposeFactory } from 'dojo-compose/compose';
import { Evented, EventedOptions, EventedListenerOrArray } from 'dojo-interfaces/bases';
import { NodeAttributeFunction } from './../interfaces';
export declare type VNodeListenerReturn = boolean | undefined | null;
export interface VNodeListeners {
    [on: string]: undefined | ((ev?: EventTargettedObject<any>) => VNodeListenerReturn);
    ontouchcancel?(ev?: TouchEvent): VNodeListenerReturn;
    ontouchend?(ev?: TouchEvent): VNodeListenerReturn;
    ontouchmove?(ev?: TouchEvent): VNodeListenerReturn;
    ontouchstart?(ev?: TouchEvent): VNodeListenerReturn;
    onblur?(ev?: FocusEvent): VNodeListenerReturn;
    onchange?(ev?: Event): VNodeListenerReturn;
    onclick?(ev?: MouseEvent): VNodeListenerReturn;
    ondblclick?(ev?: MouseEvent): VNodeListenerReturn;
    onfocus?(ev?: FocusEvent): VNodeListenerReturn;
    oninput?(ev?: Event): VNodeListenerReturn;
    onkeydown?(ev?: KeyboardEvent): VNodeListenerReturn;
    onkeypress?(ev?: KeyboardEvent): VNodeListenerReturn;
    onkeyup?(ev?: KeyboardEvent): VNodeListenerReturn;
    onload?(ev?: Event): VNodeListenerReturn;
    onmousedown?(ev?: MouseEvent): VNodeListenerReturn;
    onmouseenter?(ev?: MouseEvent): VNodeListenerReturn;
    onmouseleave?(ev?: MouseEvent): VNodeListenerReturn;
    onmousemove?(ev?: MouseEvent): VNodeListenerReturn;
    onmouseout?(ev?: MouseEvent): VNodeListenerReturn;
    onmouseover?(ev?: MouseEvent): VNodeListenerReturn;
    onmouseup?(ev?: MouseEvent): VNodeListenerReturn;
    onmousewheel?(ev?: MouseWheelEvent): VNodeListenerReturn;
    onscroll?(ev?: UIEvent): VNodeListenerReturn;
    onsubmit?(ev?: Event): VNodeListenerReturn;
}
export interface VNodeEventedMixin {
    /**
     * A map of listeners that are exposed for use by the virutal DOM
     */
    listeners: VNodeListeners;
    /**
     * An array of functions the provide the VNode attributes when rendering
     */
    nodeAttributes: NodeAttributeFunction<this>[];
}
export interface VNodeEventedOverrides {
    on(type: 'touchcancel', listener: EventedListenerOrArray<EventTarget, TouchEvent>): Handle;
    on(type: 'touchend', listener: EventedListenerOrArray<EventTarget, TouchEvent>): Handle;
    on(type: 'touchmove', listener: EventedListenerOrArray<EventTarget, TouchEvent>): Handle;
    on(type: 'blur', listener: EventedListenerOrArray<EventTarget, FocusEvent>): Handle;
    on(type: 'change', listener: EventedListenerOrArray<EventTarget, Event>): Handle;
    on(type: 'click', listener: EventedListenerOrArray<EventTarget, MouseEvent>): Handle;
    on(type: 'dblclick', listener: EventedListenerOrArray<EventTarget, MouseEvent>): Handle;
    on(type: 'focus', listener: EventedListenerOrArray<EventTarget, FocusEvent>): Handle;
    on(type: 'input', listener: EventedListenerOrArray<EventTarget, Event>): Handle;
    on(type: 'keydown', listener: EventedListenerOrArray<EventTarget, KeyboardEvent>): Handle;
    on(type: 'keypress', listener: EventedListenerOrArray<EventTarget, KeyboardEvent>): Handle;
    on(type: 'keyup', listener: EventedListenerOrArray<EventTarget, KeyboardEvent>): Handle;
    on(type: 'load', listener: EventedListenerOrArray<EventTarget, Event>): Handle;
    on(type: 'mousedown', listener: EventedListenerOrArray<EventTarget, MouseEvent>): Handle;
    on(type: 'mouseenter', listener: EventedListenerOrArray<EventTarget, MouseEvent>): Handle;
    on(type: 'mouseleave', listener: EventedListenerOrArray<EventTarget, MouseEvent>): Handle;
    on(type: 'mousemove', listener: EventedListenerOrArray<EventTarget, MouseEvent>): Handle;
    on(type: 'mouseout', listener: EventedListenerOrArray<EventTarget, MouseEvent>): Handle;
    on(type: 'mouseover', listener: EventedListenerOrArray<EventTarget, MouseEvent>): Handle;
    on(type: 'mouseup', listener: EventedListenerOrArray<EventTarget, MouseEvent>): Handle;
    on(type: 'mousewheel', listener: EventedListenerOrArray<EventTarget, MouseWheelEvent>): Handle;
    on(type: 'scroll', listener: EventedListenerOrArray<EventTarget, UIEvent>): Handle;
    on(type: 'submit', listener: EventedListenerOrArray<EventTarget, Event>): Handle;
}
export declare type VNodeEvented = Evented & VNodeEventedMixin & VNodeEventedOverrides;
export declare type VNodeEventedOptions = EventedOptions;
export interface VNodeEventedFactory extends ComposeFactory<VNodeEvented, VNodeEventedOptions> {
}
declare const createVNodeEvented: VNodeEventedFactory;
export default createVNodeEvented;
