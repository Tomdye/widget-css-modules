{"version":3,"file":"createWidgetBase.js","sourceRoot":"","sources":["createWidgetBase.ts"],"names":[],"mappings":"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","sourcesContent":["import { isComposeFactory } from 'dojo-compose/compose';\nimport createStateful from 'dojo-compose/bases/createStateful';\nimport {\n\tDNode,\n\tWNode,\n\tWidget,\n\tWidgetMixin,\n\tWidgetState,\n\tWidgetOptions,\n\tWidgetProperties,\n\tWidgetFactory,\n\tFactoryRegistryItem\n} from './interfaces';\nimport { VNode, VNodeProperties } from 'dojo-interfaces/vdom';\nimport { deepAssign, assign } from 'dojo-core/lang';\nimport WeakMap from 'dojo-shim/WeakMap';\nimport Promise from 'dojo-shim/Promise';\nimport Map from 'dojo-shim/Map';\nimport { v, registry } from './d';\nimport FactoryRegistry from './FactoryRegistry';\nimport createVNodeEvented from './mixins/createVNodeEvented';\nimport shallowPropertyComparisonMixin from './mixins/shallowPropertyComparisonMixin';\n\ninterface WidgetInternalState {\n\tchildren: DNode[];\n\treadonly id: string;\n\tdirty: boolean;\n\twidgetClasses: string[];\n\tcachedVNode?: VNode | string;\n\tfactoryRegistry: FactoryRegistry;\n\tinitializedFactoryMap: Map<string, Promise<WidgetFactory>>;\n\tpreviousProperties: WidgetProperties;\n\thistoricChildrenMap: Map<string | Promise<WidgetFactory> | WidgetFactory, Widget<WidgetState, WidgetProperties>>;\n\tcurrentChildrenMap: Map<string | Promise<WidgetFactory> | WidgetFactory, Widget<WidgetState, WidgetProperties>>;\n};\n\n/**\n * Internal state map for widget instances\n */\nconst widgetInternalStateMap = new WeakMap<Widget<WidgetState, WidgetProperties>, WidgetInternalState>();\n\n/**\n * The counter for generating a unique ID\n */\nlet widgetCount = 0;\n\nfunction generateID(instance: Widget<WidgetState, WidgetProperties>): string {\n\treturn `widget-${++widgetCount}`;\n}\n\nfunction isWNode(child: DNode): child is WNode {\n\treturn Boolean(child && (<WNode> child).factory !== undefined);\n}\n\nfunction getFromRegistry(instance: Widget<WidgetState, WidgetProperties>, factoryLabel: string): FactoryRegistryItem | null {\n\tif (instance.registry.has(factoryLabel)) {\n\t\treturn instance.registry.get(factoryLabel);\n\t}\n\n\treturn registry.get(factoryLabel);\n}\n\nfunction dNodeToVNode(instance: Widget<WidgetState, WidgetProperties>, dNode: DNode): VNode | string | null {\n\tconst internalState = widgetInternalStateMap.get(instance);\n\n\tif (typeof dNode === 'string' || dNode === null) {\n\t\treturn dNode;\n\t}\n\n\tif (isWNode(dNode)) {\n\t\tconst { children, options: { id, properties } } = dNode;\n\n\t\tlet { factory } = dNode;\n\t\tlet child: Widget<WidgetState, WidgetProperties>;\n\n\t\tif (typeof factory === 'string') {\n\t\t\tconst item = getFromRegistry(instance, factory);\n\n\t\t\tif (isComposeFactory(item)) {\n\t\t\t\tfactory = <WidgetFactory> item;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (item && !internalState.initializedFactoryMap.has(factory)) {\n\t\t\t\t\tconst promise = (<Promise<WidgetFactory>> item).then((factory) => {\n\t\t\t\t\t\tinstance.invalidate();\n\t\t\t\t\t\treturn factory;\n\t\t\t\t\t});\n\t\t\t\t\tinternalState.initializedFactoryMap.set(factory, promise);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tconst childrenMapKey = id || factory;\n\t\tconst cachedChild = internalState.historicChildrenMap.get(childrenMapKey);\n\n\t\tif (cachedChild) {\n\t\t\tchild = cachedChild;\n\t\t\tif (properties) {\n\t\t\t\tchild.properties = properties;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tchild = factory(dNode.options);\n\t\t\tchild.own(child.on('invalidated', () => {\n\t\t\t\tinstance.invalidate();\n\t\t\t}));\n\t\t\tinternalState.historicChildrenMap.set(childrenMapKey, child);\n\t\t\tinstance.own(child);\n\t\t}\n\t\tif (!id && internalState.currentChildrenMap.has(factory)) {\n\t\t\tconst errorMsg = 'must provide unique keys when using the same widget factory multiple times';\n\t\t\tconsole.error(errorMsg);\n\t\t\tinstance.emit({ type: 'error', target: instance, error: new Error(errorMsg) });\n\t\t}\n\n\t\tchild.children = children;\n\t\tinternalState.currentChildrenMap.set(childrenMapKey, child);\n\n\t\treturn child.__render__();\n\t}\n\n\tdNode.children = dNode.children\n\t\t.filter((child) => child !== null)\n\t\t.map((child: DNode) => {\n\t\t\treturn dNodeToVNode(instance, child);\n\t\t});\n\n\treturn dNode.render({ bind: instance });\n}\n\nfunction manageDetachedChildren(instance: Widget<WidgetState, WidgetProperties>): void {\n\tconst internalState = widgetInternalStateMap.get(instance);\n\n\tinternalState.historicChildrenMap.forEach((child, key) => {\n\t\tif (!internalState.currentChildrenMap.has(key)) {\n\t\t\tinternalState.historicChildrenMap.delete(key);\n\t\t\tchild.destroy();\n\t\t}\n\t});\n\tinternalState.currentChildrenMap.clear();\n}\n\nfunction formatTagNameAndClasses(tagName: string, classes: string[]) {\n\tif (classes.length) {\n\t\treturn `${tagName}.${classes.join('.')}`;\n\t}\n\treturn tagName;\n}\n\nfunction generateProperties(instance: Widget<WidgetState, WidgetProperties>, previousProperties: any): any {\n\tconst changedPropertyKeys = instance.diffProperties(previousProperties);\n\tconst changedProperties: { currentProperties: any, previousProperties: any } = {\n\t\tcurrentProperties: {},\n\t\tpreviousProperties: {}\n\t};\n\n\tchangedPropertyKeys.forEach((key) => {\n\t\tchangedProperties.currentProperties[key] = instance.properties[key];\n\t\tif (previousProperties[key]) {\n\t\t\tchangedProperties.previousProperties[key] = previousProperties[key];\n\t\t}\n\t});\n\n\treturn changedProperties;\n}\n\nconst createWidget: WidgetFactory = createStateful\n\t.mixin(createVNodeEvented)\n\t.mixin<WidgetMixin<WidgetProperties>, WidgetOptions<WidgetState, WidgetProperties>>({\n\t\tmixin: {\n\t\t\tproperties: {},\n\n\t\t\tclasses: [],\n\n\t\t\tgetNode(): DNode {\n\t\t\t\tconst tag = formatTagNameAndClasses(this.tagName, this.classes);\n\t\t\t\treturn v(tag, this.getNodeAttributes(), this.getChildrenNodes());\n\t\t\t},\n\n\t\t\tset children(this: Widget<WidgetState, WidgetProperties>, children: DNode[]) {\n\t\t\t\tconst internalState = widgetInternalStateMap.get(this);\n\t\t\t\tinternalState.children = children;\n\t\t\t\tthis.emit({\n\t\t\t\t\ttype: 'widget:children',\n\t\t\t\t\ttarget: this\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tget children() {\n\t\t\t\treturn widgetInternalStateMap.get(this).children;\n\t\t\t},\n\n\t\t\tgetChildrenNodes(this: Widget<WidgetState, WidgetProperties>): DNode[] {\n\t\t\t\treturn this.children;\n\t\t\t},\n\n\t\t\tgetNodeAttributes(this: Widget<WidgetState, WidgetProperties>, overrides?: VNodeProperties): VNodeProperties {\n\t\t\t\tconst props: VNodeProperties = {};\n\n\t\t\t\tthis.nodeAttributes.forEach((fn) => {\n\t\t\t\t\tconst newProps: VNodeProperties = fn.call(this);\n\t\t\t\t\tif (newProps) {\n\t\t\t\t\t\tassign(props, newProps);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn props;\n\t\t\t},\n\n\t\t\tinvalidate(this: Widget<WidgetState, WidgetProperties>): void {\n\t\t\t\tconst internalState = widgetInternalStateMap.get(this);\n\t\t\t\tinternalState.dirty = true;\n\t\t\t\tthis.emit({\n\t\t\t\t\ttype: 'invalidated',\n\t\t\t\t\ttarget: this\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tget id(this: Widget<WidgetState, WidgetProperties>): string {\n\t\t\t\tconst { id } = widgetInternalStateMap.get(this);\n\n\t\t\t\treturn id;\n\t\t\t},\n\n\t\t\tapplyChangedProperties: function(this: Widget<WidgetState, WidgetProperties>, previousProperties: WidgetProperties, currentProperties: WidgetProperties): void {\n\t\t\t\tif (Object.keys(currentProperties).length) {\n\t\t\t\t\tcurrentProperties['id'] = this.id;\n\t\t\t\t\tthis.setState(currentProperties);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdiffProperties(this: Widget<WidgetState, WidgetProperties>, previousProperties: any): string[] {\n\t\t\t\treturn Object.keys(this.properties);\n\t\t\t},\n\n\t\t\tnodeAttributes: [\n\t\t\t\tfunction (this: Widget<WidgetState, WidgetProperties>): VNodeProperties {\n\t\t\t\t\tconst baseIdProp = this.state && this.state.id ? { 'data-widget-id': this.state.id } : {};\n\t\t\t\t\tconst { styles = {} } = this.state || {};\n\t\t\t\t\tconst classes: { [index: string]: boolean; } = {};\n\n\t\t\t\t\tconst internalState = widgetInternalStateMap.get(this);\n\n\t\t\t\t\tinternalState.widgetClasses.forEach((c) => classes[c] = false);\n\n\t\t\t\t\tif (this.state && this.state.classes) {\n\t\t\t\t\t\tthis.state.classes.forEach((c) => classes[c] = true);\n\t\t\t\t\t\tinternalState.widgetClasses =  this.state.classes;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn assign(baseIdProp, { key: this, classes, styles });\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t__render__(this: Widget<WidgetState, WidgetProperties>): VNode | string | null {\n\t\t\t\tconst internalState = widgetInternalStateMap.get(this);\n\t\t\t\tconst updatedProperties = generateProperties(this, internalState.previousProperties);\n\t\t\t\tthis.applyChangedProperties(updatedProperties.previousProperties, updatedProperties.currentProperties);\n\n\t\t\t\tif (internalState.dirty || !internalState.cachedVNode) {\n\t\t\t\t\tconst widget = dNodeToVNode(this, this.getNode());\n\t\t\t\t\tmanageDetachedChildren(this);\n\t\t\t\t\tif (widget) {\n\t\t\t\t\t\tinternalState.cachedVNode = widget;\n\t\t\t\t\t}\n\t\t\t\t\tinternalState.dirty = false;\n\t\t\t\t\tinternalState.previousProperties = deepAssign({}, this.properties);\n\t\t\t\t\treturn widget;\n\t\t\t\t}\n\t\t\t\treturn internalState.cachedVNode;\n\t\t\t},\n\n\t\t\tget registry(this: Widget<WidgetState, WidgetProperties>): FactoryRegistry {\n\t\t\t\treturn widgetInternalStateMap.get(this).factoryRegistry;\n\t\t\t},\n\n\t\t\ttagName: 'div'\n\t\t},\n\t\tinitialize(instance: Widget<WidgetState, WidgetProperties>, options: WidgetOptions<WidgetState, { id?: string }> = {}) {\n\t\t\tconst { tagName, properties = {} } = options;\n\t\t\tconst id = properties.id || options.id || generateID(instance);\n\n\t\t\tinstance.properties = properties;\n\t\t\tinstance.tagName = tagName || instance.tagName;\n\n\t\t\twidgetInternalStateMap.set(instance, {\n\t\t\t\tid,\n\t\t\t\tdirty: true,\n\t\t\t\twidgetClasses: [],\n\t\t\t\tpreviousProperties: deepAssign({}, properties),\n\t\t\t\tfactoryRegistry: new FactoryRegistry(),\n\t\t\t\tinitializedFactoryMap: new Map<string, Promise<WidgetFactory>>(),\n\t\t\t\thistoricChildrenMap: new Map<string | Promise<WidgetFactory> | WidgetFactory, Widget<WidgetState, WidgetProperties>>(),\n\t\t\t\tcurrentChildrenMap: new Map<string | Promise<WidgetFactory> | WidgetFactory, Widget<WidgetState, WidgetProperties>>(),\n\t\t\t\tchildren: []\n\t\t\t});\n\n\t\t\tinstance.applyChangedProperties({}, properties);\n\t\t\tinstance.own(instance.on('state:changed', () => {\n\t\t\t\tinstance.invalidate();\n\t\t\t}));\n\t\t}\n\t})\n\t.mixin(shallowPropertyComparisonMixin);\n\nexport default createWidget;\n"]}