(function (dependencies, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(dependencies, factory);
    }
})(["require", "exports", "dojo-compose/compose", "dojo-compose/bases/createStateful", "dojo-core/lang", "dojo-shim/WeakMap", "dojo-shim/Map", "./d", "./FactoryRegistry", "./mixins/createVNodeEvented", "./mixins/shallowPropertyComparisonMixin"], function (require, exports) {
    "use strict";
    var compose_1 = require("dojo-compose/compose");
    var createStateful_1 = require("dojo-compose/bases/createStateful");
    var lang_1 = require("dojo-core/lang");
    var WeakMap_1 = require("dojo-shim/WeakMap");
    var Map_1 = require("dojo-shim/Map");
    var d_1 = require("./d");
    var FactoryRegistry_1 = require("./FactoryRegistry");
    var createVNodeEvented_1 = require("./mixins/createVNodeEvented");
    var shallowPropertyComparisonMixin_1 = require("./mixins/shallowPropertyComparisonMixin");
    ;
    /**
     * Internal state map for widget instances
     */
    var widgetInternalStateMap = new WeakMap_1.default();
    /**
     * The counter for generating a unique ID
     */
    var widgetCount = 0;
    function generateID(instance) {
        return "widget-" + ++widgetCount;
    }
    function isWNode(child) {
        return Boolean(child && child.factory !== undefined);
    }
    function getFromRegistry(instance, factoryLabel) {
        if (instance.registry.has(factoryLabel)) {
            return instance.registry.get(factoryLabel);
        }
        return d_1.registry.get(factoryLabel);
    }
    function dNodeToVNode(instance, dNode) {
        var internalState = widgetInternalStateMap.get(instance);
        if (typeof dNode === 'string' || dNode === null) {
            return dNode;
        }
        if (isWNode(dNode)) {
            var children = dNode.children, _a = dNode.options, id = _a.id, properties = _a.properties;
            var factory = dNode.factory;
            var child = void 0;
            if (typeof factory === 'string') {
                var item = getFromRegistry(instance, factory);
                if (compose_1.isComposeFactory(item)) {
                    factory = item;
                }
                else {
                    if (item && !internalState.initializedFactoryMap.has(factory)) {
                        var promise = item.then(function (factory) {
                            instance.invalidate();
                            return factory;
                        });
                        internalState.initializedFactoryMap.set(factory, promise);
                    }
                    return null;
                }
            }
            var childrenMapKey = id || factory;
            var cachedChild = internalState.historicChildrenMap.get(childrenMapKey);
            if (cachedChild) {
                child = cachedChild;
                if (properties) {
                    child.properties = properties;
                }
            }
            else {
                child = factory(dNode.options);
                child.own(child.on('invalidated', function () {
                    instance.invalidate();
                }));
                internalState.historicChildrenMap.set(childrenMapKey, child);
                instance.own(child);
            }
            if (!id && internalState.currentChildrenMap.has(factory)) {
                var errorMsg = 'must provide unique keys when using the same widget factory multiple times';
                console.error(errorMsg);
                instance.emit({ type: 'error', target: instance, error: new Error(errorMsg) });
            }
            child.children = children;
            internalState.currentChildrenMap.set(childrenMapKey, child);
            return child.__render__();
        }
        dNode.children = dNode.children
            .filter(function (child) { return child !== null; })
            .map(function (child) {
            return dNodeToVNode(instance, child);
        });
        return dNode.render({ bind: instance });
    }
    function manageDetachedChildren(instance) {
        var internalState = widgetInternalStateMap.get(instance);
        internalState.historicChildrenMap.forEach(function (child, key) {
            if (!internalState.currentChildrenMap.has(key)) {
                internalState.historicChildrenMap.delete(key);
                child.destroy();
            }
        });
        internalState.currentChildrenMap.clear();
    }
    function formatTagNameAndClasses(tagName, classes) {
        if (classes.length) {
            return tagName + "." + classes.join('.');
        }
        return tagName;
    }
    function generateProperties(instance, previousProperties) {
        var changedPropertyKeys = instance.diffProperties(previousProperties);
        var changedProperties = {
            currentProperties: {},
            previousProperties: {}
        };
        changedPropertyKeys.forEach(function (key) {
            changedProperties.currentProperties[key] = instance.properties[key];
            if (previousProperties[key]) {
                changedProperties.previousProperties[key] = previousProperties[key];
            }
        });
        return changedProperties;
    }
    var createWidget = createStateful_1.default
        .mixin(createVNodeEvented_1.default)
        .mixin({
        mixin: {
            properties: {},
            classes: [],
            getNode: function () {
                var tag = formatTagNameAndClasses(this.tagName, this.classes);
                return d_1.v(tag, this.getNodeAttributes(), this.getChildrenNodes());
            },
            set children(children) {
                var internalState = widgetInternalStateMap.get(this);
                internalState.children = children;
                this.emit({
                    type: 'widget:children',
                    target: this
                });
            },
            get children() {
                return widgetInternalStateMap.get(this).children;
            },
            getChildrenNodes: function () {
                return this.children;
            },
            getNodeAttributes: function (overrides) {
                var _this = this;
                var props = {};
                this.nodeAttributes.forEach(function (fn) {
                    var newProps = fn.call(_this);
                    if (newProps) {
                        lang_1.assign(props, newProps);
                    }
                });
                return props;
            },
            invalidate: function () {
                var internalState = widgetInternalStateMap.get(this);
                internalState.dirty = true;
                this.emit({
                    type: 'invalidated',
                    target: this
                });
            },
            get id() {
                var id = widgetInternalStateMap.get(this).id;
                return id;
            },
            applyChangedProperties: function (previousProperties, currentProperties) {
                if (Object.keys(currentProperties).length) {
                    currentProperties['id'] = this.id;
                    this.setState(currentProperties);
                }
            },
            diffProperties: function (previousProperties) {
                return Object.keys(this.properties);
            },
            nodeAttributes: [
                function () {
                    var baseIdProp = this.state && this.state.id ? { 'data-widget-id': this.state.id } : {};
                    var _a = (this.state || {}).styles, styles = _a === void 0 ? {} : _a;
                    var classes = {};
                    var internalState = widgetInternalStateMap.get(this);
                    internalState.widgetClasses.forEach(function (c) { return classes[c] = false; });
                    if (this.state && this.state.classes) {
                        this.state.classes.forEach(function (c) { return classes[c] = true; });
                        internalState.widgetClasses = this.state.classes;
                    }
                    return lang_1.assign(baseIdProp, { key: this, classes: classes, styles: styles });
                }
            ],
            __render__: function () {
                var internalState = widgetInternalStateMap.get(this);
                var updatedProperties = generateProperties(this, internalState.previousProperties);
                this.applyChangedProperties(updatedProperties.previousProperties, updatedProperties.currentProperties);
                if (internalState.dirty || !internalState.cachedVNode) {
                    var widget = dNodeToVNode(this, this.getNode());
                    manageDetachedChildren(this);
                    if (widget) {
                        internalState.cachedVNode = widget;
                    }
                    internalState.dirty = false;
                    internalState.previousProperties = lang_1.deepAssign({}, this.properties);
                    return widget;
                }
                return internalState.cachedVNode;
            },
            get registry() {
                return widgetInternalStateMap.get(this).factoryRegistry;
            },
            tagName: 'div'
        },
        initialize: function (instance, options) {
            if (options === void 0) { options = {}; }
            var tagName = options.tagName, _a = options.properties, properties = _a === void 0 ? {} : _a;
            var id = properties.id || options.id || generateID(instance);
            instance.properties = properties;
            instance.tagName = tagName || instance.tagName;
            widgetInternalStateMap.set(instance, {
                id: id,
                dirty: true,
                widgetClasses: [],
                previousProperties: lang_1.deepAssign({}, properties),
                factoryRegistry: new FactoryRegistry_1.default(),
                initializedFactoryMap: new Map_1.default(),
                historicChildrenMap: new Map_1.default(),
                currentChildrenMap: new Map_1.default(),
                children: []
            });
            instance.applyChangedProperties({}, properties);
            instance.own(instance.on('state:changed', function () {
                instance.invalidate();
            }));
        }
    })
        .mixin(shallowPropertyComparisonMixin_1.default);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createWidget;
});
//# sourceMappingURL=createWidgetBase.js.map